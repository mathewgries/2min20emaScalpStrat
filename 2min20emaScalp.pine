//@version=5
strategy("2min 20ema", overlay = true)

// Check if open position
// If open, check for exit
// If not in position, check for entry


//=============== Declare Variables ===========================================================================
float pAverage = na // Determines median of candle based on OHLC
float _20ema = na
int directionCharacter = na // Values: trend up = 1, trend down = 2

bool isInPosition = na
float entryPrice = na
float prevEntryPrice = na
bool enterLong = na
bool enterShort = na
float diffEntryCurrentPrice = na

int ptsOnGain = na
int ptsOnLoss = na

//=============== Set EMA markers ===========================================================================

pAverage := (high + low + open + close)/4
_20ema := ta.ema(pAverage, 20) // tighten 20 ema to average of all candle values OHLC

//=============== Determine Short Term Trend ===========================================================================

// Average of last 5 20 emas is below current, trend is up.
// Average of last 5 20 emas is above curre,t trend is down
if (_20ema[5] + _20ema[4] + _20ema[3] + _20ema[2] + _20ema[1])/5 < _20ema
    directionCharacter := 1
else
    directionCharacter := 2

//=============== Validate an exit ==========================================================================================

prevEntryPrice := nz(entryPrice[1])

if prevEntryPrice != 0
    isInPosition := true
    entryPrice := prevEntryPrice
    diffEntryCurrentPrice := math.abs(entryPrice - close)
else
    isInPosition := false
    entryPrice := na

if isInPosition and enterLong[1]
    if entryPrice > close and diffEntryCurrentPrice >= 5
        isInPosition := false
        enterLong := false
        label.new(bar_index, high, 
          "EXIT LONG LOSS: " + str.tostring(close), 
          color=color.white
         )
    else if entryPrice < close and diffEntryCurrentPrice <= 10
        isInPosition := false
        enterLong := false
        label.new(bar_index, high, 
          "EXIT LONG PROFIT: " + str.tostring(close), 
          color=color.white
         )
    else
        enterLong := true

if isInPosition and enterShort[1]
    if entryPrice < close and diffEntryCurrentPrice >= 5
        isInPosition := false
        enterShort := false
        label.new(bar_index, high, 
          "EXIT SHORT LOSS: " + str.tostring(close), 
          color=color.white
         )
    else if entryPrice > close and diffEntryCurrentPrice <= 10
        isInPosition := false
        enterShort := false
        label.new(bar_index, high, 
          "EXIT SHORT PROFIT: " + str.tostring(close), 
          color=color.white
         )
    else
        enterShort := true

log.info("Current: " + str.tostring(close))

//=============== Validate an entry ==========================================================================================

enterLong := 
  not isInPosition[1]
  and directionCharacter == 1
  and directionCharacter[1] == directionCharacter
  and (open[1] > _20ema and open[2] > _20ema)
  and low[1] < _20ema 
  and (close[1] > _20ema and close[2] > _20ema )
  and open > _20ema 
 ? true : false

prevEnterlong = enterLong[1]

enterShort := 
  not isInPosition[1]
  and directionCharacter == 2
  and directionCharacter[1] == directionCharacter
  and (open[1] < _20ema and open[2] < _20ema)
  and high[1] > _20ema 
  and (close[1] < _20ema and close[2] < _20ema )
  and open < _20ema 
 ? true : false

prevEnterShort = enterShort[1]

if enterLong or enterShort
    isInPosition := true
    entryPrice := open
    directionText = enterLong ? 'long' : 'short'
    label.new(
      bar_index, 
      high, 
      str.tostring(entryPrice) +'\n'+directionText, 
      color=color.white
     )
else
    isInPosition := false

//=============== Plot the data =========================================================================================================

plot(_20ema, "My 20 Ema", color.red)
plotshape(
  directionCharacter == 1 and directionCharacter[1] != 1, 
  style=shape.triangleup, 
  location = location.abovebar, 
  color = color.green)
plotshape(
  directionCharacter == 2 and directionCharacter[1] != 2, 
  style=shape.triangledown, 
  location = location.belowbar, 
  color = color.red)
plotshape(
  enterLong and isInPosition and not isInPosition[1],
  style=shape.triangleup, 
  location = location.abovebar, 
  color = color.orange)
plotshape(
  enterShort and isInPosition and not isInPosition[1], 
  style=shape.triangledown, 
  location = location.belowbar, 
  color = color.blue)
