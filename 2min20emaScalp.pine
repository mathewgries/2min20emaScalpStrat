//@version=5
strategy("2min 20ema", overlay = true, calc_on_every_tick = true)
// Order of operations
// Set trend parameters
// Check if we are in a position
    // If yes: Check if we should take loss or take profit
// Check if we should take entry
    // 
//=============== Declare Variables ====================================================================================

// CONSTANTS
var float STOP_POINTS = 10
var float PROFIT_POINTS = 20

// Trend parameters
var float pAverage = na // Determines median of candle based on OHLC
var float _20ema = na
var int   directionCharacter =  na // Values: trend up = 1, trend down = 2

// Position parameters
var bool  inPosition = false
var bool  inLongPosition = na
var bool  inShortPosition = na
var float entryPrice = na
var float stopLossPrice = na
var float stopProfitPrice = na
var bool  isProfit = na
var float totalPointProfit = 0.0
var float totalPointLoss = 0.0
var float totalDollarsProfit = 0.0
var float totalDolloarsLoss = 0.0

//=============== Table to Display results =============================================================================

var table totalsTable = table.new(position.top_right, 4, 4, frame_width = 2, frame_color = color.black)
table.cell(totalsTable, 0, 0, bgcolor = color.blue)
table.cell(totalsTable, 1,0, "Profit", bgcolor = color.blue, text_color = color.white)
table.cell(totalsTable, 2,0, "Loss", bgcolor = color.blue, text_color = color.white)
table.cell(totalsTable, 0,1, "Pts", text_halign = 'center', text_valign = 'center')
table.cell(totalsTable, 0,2, "$",text_halign = 'center', text_valign = 'center')

//=============== Set Trend Parameters =================================================================================

pAverage := (high + low + open + close)/4
_20ema := ta.ema(pAverage, 20)

if (_20ema[5] + _20ema[4] + _20ema[3] + _20ema[2] + _20ema[1])/5 < _20ema
    directionCharacter := 1
else
    directionCharacter := 2

//============== User defined functions ================================================================================

// Long entry and exit validation
getLongEntry() => 
    log.info(str.tostring(directionCharacter))
    directionCharacter[1] == directionCharacter
      and open[1]  > _20ema 
      and open[2]  > _20ema
      and low[1]   < _20ema 
      and close[1] > _20ema
      and close[2] > _20ema
      and open     > _20ema

getLongExit() => 
    high >= stopProfitPrice
      or low <= stopLossPrice

// Short entry and exit validation
getShortEntry() =>
    log.info(str.tostring(directionCharacter))
    directionCharacter[1] == directionCharacter
      and open[1]  < _20ema 
      and open[2]  < _20ema
      and high[1]  > _20ema 
      and close[1] < _20ema
      and close[2] < _20ema
      and open     < _20ema

getShortExit() =>
    low <= stopProfitPrice 
      or high >= stopLossPrice

//============== Check for position and eixt ===========================================================================

glex = getLongExit()
if inPosition and inLongPosition[1] and glex
    log.info("EXIT LONG")
    inLongPosition := false
    inPosition := false
    isProfit := high >= stopProfitPrice ? true : false
    if isProfit
        totalPointProfit += PROFIT_POINTS
        totalDollarsProfit += PROFIT_POINTS * 4 * 5
        table.cell(totalsTable, 1,1, str.tostring(totalPointProfit))
        table.cell(totalsTable, 1,2, str.tostring(totalDollarsProfit))
    else
        totalPointLoss += STOP_POINTS
        totalDolloarsLoss += STOP_POINTS * 4 * 5
        table.cell(totalsTable, 2,1, str.tostring(totalPointLoss))
        table.cell(totalsTable, 2,2, str.tostring(totalDolloarsLoss))
    label.new(bar_index, high, 
      "EXIT LONG \n" + str.tostring(close),
      color=color.white
     )

gsex = getShortExit()
if inPosition and inShortPosition[1] and gsex
    log.info('EXIT SHORT')
    inShortPosition := false
    inPosition := false
    isProfit := low <= stopProfitPrice ? true : false
    if isProfit
        totalPointProfit += PROFIT_POINTS
        totalDollarsProfit += PROFIT_POINTS * 4 * 5
        table.cell(totalsTable, 1,1, str.tostring(totalPointProfit))
        table.cell(totalsTable, 1,2, str.tostring(totalDollarsProfit))
    else
        totalPointLoss += STOP_POINTS
        totalDolloarsLoss += STOP_POINTS * 4 * 5
        table.cell(totalsTable, 2,1, str.tostring(totalPointLoss))
        table.cell(totalsTable, 2,2, str.tostring(totalDolloarsLoss))
    label.new(bar_index, high, 
      "EXIT SHORT \n" + str.tostring(close),
      color=color.white
     )

//============== Check for position entry ==============================================================================

glen = getLongEntry()
gsen = getShortEntry()
if not inPosition
    if directionCharacter == 1 and glen
        log.info("ENTER LONG")
        inPosition := true
        inLongPosition := true
        entryPrice := open
        stopLossPrice := entryPrice - STOP_POINTS
        stopProfitPrice := entryPrice + PROFIT_POINTS
        label.new(bar_index, high, 
          "ENTER LONG \n" + str.tostring(entryPrice),
          color=color.white
         )
    if directionCharacter == 2 and gsen
        log.info("ENTER SHORT")
        inPosition := true
        inShortPosition := true
        entryPrice := open
        stopLossPrice := entryPrice + STOP_POINTS
        stopProfitPrice := entryPrice - PROFIT_POINTS
        label.new(bar_index, high, 
          "ENTER SHORT \n" + str.tostring(entryPrice),
          color=color.white
         )

//=============== Plot the data ========================================================================================

plot(_20ema, "My 20 Ema", color.red)
plotshape(
  directionCharacter == 1 and directionCharacter[1] != 1, 
  style=shape.triangleup, 
  location = location.abovebar, 
  color = color.green)
plotshape(
  directionCharacter == 2 and directionCharacter[1] != 2, 
  style=shape.triangledown, 
  location = location.belowbar, 
  color = color.red)
// plotshape(
//   enterLong and isInPosition and not isInPosition[1],
//   style=shape.triangleup, 
//   location = location.abovebar, 
//   color = color.orange)
// plotshape(
//   enterShort and isInPosition and not isInPosition[1], 
//   style=shape.triangledown, 
//   location = location.belowbar, 
//   color = color.blue)
